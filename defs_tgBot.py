from re import X
# pip install pyTelegramBotAPI SpeechRecognition pydub
# pip install Pillow
# pip install python-dotenv

from telebot.types import MessageEntity #
import os
import sys
import telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
# import config
import speech_recognition
from pydub import AudioSegment
from PIL import Image, ImageEnhance, ImageFilter
from dotenv.main import load_dotenv

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ env
load_dotenv()
token = os.environ['TOKEN_TGBOT']  # <<< –í–∞—à —Ç–æ–∫–µ–Ω
# print(token)
# sys.exit("Exit 47")
bot = telebot.TeleBot(token)

def transform_image(filename):
    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    source_image = Image.open(filename)
    enhanced_image = source_image.filter(ImageFilter.EMBOSS)
    enhanced_image = enhanced_image.convert('RGB')
    enhanced_image.save(filename)
    return filename

def resize_image(filename, n:int = 2 ):
    # –§—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ n —Ä–∞–∑
    source_image = Image.open(filename)
    width = source_image.size[0]
    height = source_image.size[1]
    enhanced_image= source_image.resize((width//n, height//n))
    enhanced_image.save(filename)
    return filename

@bot.message_handler(content_types=['photo'])
def resend_photo(message):
    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file_id = message.photo[-1].file_id
    x = str(message.caption)
    try :
      n = int(x)
    except :
      n = 3
    filename = download_file(bot, file_id)

    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    # transform_image(filename)
    resize_image(filename, n)

    message_caption = '–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –≤ ' + str(n) + ' —Ä–∞–∑.'
    image = open(filename, 'rb')
    bot.send_photo(message.chat.id, image, message_caption)
    image.close()

    # –ù–µ –∑–∞–±—ã–≤–∞–µ–º —É–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if os.path.exists(filename):
        os.remove(filename)


def oga2wav(filename):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–æ–≤
    new_filename = filename.replace('.oga', '.wav')
    audio = AudioSegment.from_file(filename)
    audio.export(new_filename, format='wav')
    return new_filename


def recognize_speech(oga_filename):
    # –ü–µ—Ä–µ–≤–æ–¥ –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç + —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    wav_filename = oga2wav(oga_filename)
    recognizer = speech_recognition.Recognizer()

    with speech_recognition.WavFile(wav_filename) as source:
        wav_audio = recognizer.record(source)

    text = recognizer.recognize_google(wav_audio, language='ru')

    if os.path.exists(oga_filename):
        os.remove(oga_filename)

    if os.path.exists(wav_filename):
        os.remove(wav_filename)

    return text


def download_file(bot, file_id):
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    filename = file_id + file_info.file_path
    filename = filename.replace('/', '_')
    with open(filename, 'wb') as f:
        f.write(downloaded_file)
    return filename


@bot.message_handler(commands=['start'])
def say_hi(message):
    # –§—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è "–ü—Ä–∏–≤–µ—Ç" –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    # bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç')
    # markup = types.InlineKeyboardMarkup()
    # button1 = types.InlineKeyboardButton("–°–∞–π—Ç –•–∞–±—Ä", url='https://habr.com/ru/all/')
    # markup.add(button1)
    # bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç)".format(message.from_user), reply_markup=markup)
    #
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –¥–æ–±—Ä—ã–π –±–æ—Ç habr.com".format(
                        message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])
def func(message):
    if (message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
        bot.send_message(message.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!.. \n –†–∞–¥ –æ–±—â–µ–Ω–∏—é —Å —Ç–æ–±–æ–π!)")
    elif (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
        btn2 = types.KeyboardButton("–ß—Ç–æ —è –º–æ–≥—É?")
        back = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1, btn2, back)
        bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)

    elif (message.text == "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"):
        bot.send_message(message.chat.id, "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–∞—Ç—è–Ω—è..")

    elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
        bot.send_message(message.chat.id, text=" –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ—Å—Ç—è.\n –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
                                               "\n –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—à—å.\n –í—ã–¥–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–≥–æ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    elif (message.text == "–ù–∞–∑–∞–¥"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
        button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª..")

@bot.message_handler(content_types=['voice'])
def transcript(message):
    # –§—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ
    filename = download_file(bot, message.voice.file_id)
    text = recognize_speech(filename)
    bot.send_message(message.chat.id, text)



# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞. –û–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —è—á–µ–π–∫–∞ (–∫—Ä—É—Ç–∏—Ç—Å—è –∑–Ω–∞—á–æ–∫ —Å–ª–µ–≤–∞).
# –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–¥–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. Ctrl-C –∏–ª–∏ –ø–æ –¥—Ä—É–≥–æ–º—É.
bot.polling()

